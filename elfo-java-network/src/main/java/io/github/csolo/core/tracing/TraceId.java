package io.github.csolo.core.tracing;

import org.jetbrains.annotations.NotNull;

// spotless:off
/**
 * TraceId represents a unique identifier for tracing messages across the elfo network.
 * Generates a new trace id according to the next layout:
 * <p>
 * - 1  bit  0 (zero)
 * - 25 bits timestamp in secs
 * - 16 bits node_no
 * - 12 bits (chunk_no & 0xfff)
 * - 10 bits counter
 * </p>
 * <b>Note! This format should be replaced by ULID soon</b>
 */
// spotless:on
public record TraceId(long value) {

  /** Create TraceId from raw 64-bit value. */
  public static TraceId fromValue(long value) {
    if (value == 0) {
      throw new IllegalArgumentException("TraceId cannot be zero");
    }
    return new TraceId(value);
  }

  /** Generate a new TraceId using the current time and node information. */
  public static TraceId generate() {
    return TraceIdGenerator.getInstance().generate();
  }

  /** Generate a new TraceId with specific node number. */
  public static TraceId generate(short nodeNo) {
    return TraceIdGenerator.getInstance().generate(nodeNo);
  }

  /** Get the raw 64-bit value. */
  @Override
  public long value() {
    return value;
  }

  /** Get the timestamp component (25 bits). */
  public long getTimestamp() {
    return (value >> 38) & 0x1FF_FFFFL;
  }

  /** Get the node number component (16 bits). */
  public short getNodeNo() {
    return (short) ((value >> 22) & 0xFFFF);
  }

  /** Get the chunk number component (12 bits). */
  public int getChunkNo() {
    return (int) ((value >> 10) & 0xFFF);
  }

  /** Get the counter component (10 bits). */
  public int getCounter() {
    return (int) (value & 0x3FF);
  }

  /** Check if this TraceId was generated by the specified node. */
  public boolean isFromNode(short nodeNo) {
    return getNodeNo() == nodeNo;
  }

  /** Get the absolute time difference in seconds between two TraceIds. */
  public long timeDelta(TraceId other) {
    long thisTime = this.getTimestamp();
    long otherTime = other.getTimestamp();

    // Handle wraparound for 25-bit timestamp
    long mask = 0x1FF_FFFFL;
    long diff1 = (thisTime - otherTime) & mask;
    long diff2 = (otherTime - thisTime) & mask;

    return Math.min(diff1, diff2);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || getClass() != obj.getClass()) return false;
    TraceId traceId = (TraceId) obj;
    return value == traceId.value;
  }

  @Override
  public @NotNull String toString() {
    return String.valueOf(value);
  }
}
